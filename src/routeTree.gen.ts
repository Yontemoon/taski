/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LogoutImport } from './routes/logout'
import { Route as LoginImport } from './routes/login'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as AuthedTodoImport } from './routes/_authed/todo'
import { Route as AuthedCalendarImport } from './routes/_authed/calendar'
import { Route as AuthedTodoIndexImport } from './routes/_authed/todo.index'
import { Route as AuthedTodoIdImport } from './routes/_authed/todo.$id'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedTodoRoute = AuthedTodoImport.update({
  id: '/todo',
  path: '/todo',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedCalendarRoute = AuthedCalendarImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedTodoIndexRoute = AuthedTodoIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedTodoRoute,
} as any)

const AuthedTodoIdRoute = AuthedTodoIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AuthedTodoRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_authed/calendar': {
      id: '/_authed/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof AuthedCalendarImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/todo': {
      id: '/_authed/todo'
      path: '/todo'
      fullPath: '/todo'
      preLoaderRoute: typeof AuthedTodoImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/todo/$id': {
      id: '/_authed/todo/$id'
      path: '/$id'
      fullPath: '/todo/$id'
      preLoaderRoute: typeof AuthedTodoIdImport
      parentRoute: typeof AuthedTodoImport
    }
    '/_authed/todo/': {
      id: '/_authed/todo/'
      path: '/'
      fullPath: '/todo/'
      preLoaderRoute: typeof AuthedTodoIndexImport
      parentRoute: typeof AuthedTodoImport
    }
  }
}

// Create and export the route tree

interface AuthedTodoRouteChildren {
  AuthedTodoIdRoute: typeof AuthedTodoIdRoute
  AuthedTodoIndexRoute: typeof AuthedTodoIndexRoute
}

const AuthedTodoRouteChildren: AuthedTodoRouteChildren = {
  AuthedTodoIdRoute: AuthedTodoIdRoute,
  AuthedTodoIndexRoute: AuthedTodoIndexRoute,
}

const AuthedTodoRouteWithChildren = AuthedTodoRoute._addFileChildren(
  AuthedTodoRouteChildren,
)

interface AuthedRouteChildren {
  AuthedCalendarRoute: typeof AuthedCalendarRoute
  AuthedTodoRoute: typeof AuthedTodoRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedCalendarRoute: AuthedCalendarRoute,
  AuthedTodoRoute: AuthedTodoRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/calendar': typeof AuthedCalendarRoute
  '/todo': typeof AuthedTodoRouteWithChildren
  '/todo/$id': typeof AuthedTodoIdRoute
  '/todo/': typeof AuthedTodoIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/calendar': typeof AuthedCalendarRoute
  '/todo/$id': typeof AuthedTodoIdRoute
  '/todo': typeof AuthedTodoIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/_authed/calendar': typeof AuthedCalendarRoute
  '/_authed/todo': typeof AuthedTodoRouteWithChildren
  '/_authed/todo/$id': typeof AuthedTodoIdRoute
  '/_authed/todo/': typeof AuthedTodoIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/calendar'
    | '/todo'
    | '/todo/$id'
    | '/todo/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/calendar'
    | '/todo/$id'
    | '/todo'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/login'
    | '/logout'
    | '/signup'
    | '/_authed/calendar'
    | '/_authed/todo'
    | '/_authed/todo/$id'
    | '/_authed/todo/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/login",
        "/logout",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/calendar",
        "/_authed/todo"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_authed/calendar": {
      "filePath": "_authed/calendar.tsx",
      "parent": "/_authed"
    },
    "/_authed/todo": {
      "filePath": "_authed/todo.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/todo/$id",
        "/_authed/todo/"
      ]
    },
    "/_authed/todo/$id": {
      "filePath": "_authed/todo.$id.tsx",
      "parent": "/_authed/todo"
    },
    "/_authed/todo/": {
      "filePath": "_authed/todo.index.tsx",
      "parent": "/_authed/todo"
    }
  }
}
ROUTE_MANIFEST_END */
